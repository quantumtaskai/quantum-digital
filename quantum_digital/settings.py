"""
Django settings for quantum_digital project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import dj_database_url

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-g0q+td8p$jx%(4*s-$7^0(sqzgd32(w#5-8_l3b@-=h*tdguo3')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')

# Add production domain
if 'digital.quantumtaskai.com' not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append('digital.quantumtaskai.com')

# Add server IP for direct access (controlled)
SERVER_IP = os.getenv('SERVER_IP', '31.97.62.205')
if SERVER_IP not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append(SERVER_IP)

# Add Dokploy wildcard domains
ALLOWED_HOSTS.extend([
    '.dokploy.site',
    '*.dokploy.site',
    'quantum-digital.dokploy.site',
])

# Add CapRover support - SECURE PRODUCTION CONFIGURATION
if os.getenv('CAPROVER_GIT_COMMIT_SHA'):
    # Running on CapRover - use specific production domains only
    ALLOWED_HOSTS = [
        'digital.quantumtaskai.com',
        'quantumdigitalproject.quantumtaskai.com',  # CapRover subdomain
        '31.97.62.205',  # Server IP if needed
    ]

# CSRF Configuration
CSRF_TRUSTED_ORIGINS = [
    'https://digital.quantumtaskai.com',
    'https://quantum-digital.dokploy.site',
    'http://quantum-digital.dokploy.site',
]

# Tell Django to trust reverse proxy headers (Traefik/Dokploy terminates SSL)
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
USE_X_FORWARDED_HOST = True
USE_X_FORWARDED_PORT = True
# Disable HTTPS-only cookies for now to allow testing
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False

# Ensure allauth builds https URLs for redirects (e.g., Google callback)
ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'https'

# Add dynamic CSRF support for CapRover
if os.getenv('CAPROVER_FRONTEND_ADDR'):
    CSRF_TRUSTED_ORIGINS.extend([
        f"https://{os.getenv('CAPROVER_FRONTEND_ADDR')}",
        f"http://{os.getenv('CAPROVER_FRONTEND_ADDR')}"
    ])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    
    # Allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    
    # Database Management Tools
    'dbbackup',
    'django_extensions',
    
    # Local apps
    'accounts',
    'profiles',
    'dashboard',
    'manager',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'quantum_digital.middleware.OnboardingMiddleware',
]

ROOT_URLCONF = 'quantum_digital.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'quantum_digital.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

if os.getenv('DATABASE_URL'):
    DATABASES = {
        'default': dj_database_url.parse(os.getenv('DATABASE_URL'))
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Whitenoise configuration
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/accounts/login/'

# Django Sites Framework
SITE_ID = 1

# Django Allauth Configuration
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Allauth Settings
ACCOUNT_ADAPTER = 'accounts.adapters.CustomAccountAdapter'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'optional'
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_LOGIN_ON_PASSWORD_RESET = True
ACCOUNT_SIGNUP_REDIRECT_URL = '/profiles/onboarding/'

# Social Account Settings
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_EMAIL_VERIFICATION = 'optional'
SOCIALACCOUNT_QUERY_EMAIL = True

# Redirect after social login
SOCIALACCOUNT_LOGIN_ON_GET = True

# Social provider settings  
# Force django-allauth to ignore placeholder environment variables
# and use database credentials from SocialApp model instead
GOOGLE_CLIENT_ID = os.getenv('GOOGLE_OAUTH2_CLIENT_ID', '')
GOOGLE_CLIENT_SECRET = os.getenv('GOOGLE_OAUTH2_CLIENT_SECRET', '')

# Only use environment variables if they contain real credentials (not placeholders)
USE_ENV_OAUTH = (GOOGLE_CLIENT_ID and 
                not GOOGLE_CLIENT_ID.startswith('your-') and 
                GOOGLE_CLIENT_SECRET and 
                not GOOGLE_CLIENT_SECRET.startswith('your-'))

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True,
        # Only set APP config if we have real environment credentials
        # Otherwise django-allauth will use SocialApp model from database
        **({'APP': {
            'client_id': GOOGLE_CLIENT_ID,
            'secret': GOOGLE_CLIENT_SECRET,
        }} if USE_ENV_OAUTH else {})
    },
}

# OAuth Credentials (to be set in environment variables)
SOCIALACCOUNT_STORE_TOKENS = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO' if DEBUG else 'WARNING',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO' if DEBUG else 'WARNING',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'WARNING',  # Changed to WARNING to catch 404s
            'propagate': False,
        },
        'django.security.DisallowedHost': {
            'handlers': ['console'],
            'level': 'CRITICAL',  # Only log critical DisallowedHost errors
            'propagate': False,
        },
        'django.server': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Ensure static files directory permissions
import os
os.makedirs(STATIC_ROOT, exist_ok=True)

# Database Backup Configuration
DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
DBBACKUP_STORAGE_OPTIONS = {'location': BASE_DIR / 'backups'}

# Create backups directory if it doesn't exist
import os
os.makedirs(BASE_DIR / 'backups', exist_ok=True)

# Backup settings
DBBACKUP_CLEANUP_KEEP = 30  # Keep 30 days of backups
DBBACKUP_CLEANUP_KEEP_MEDIA = 30  # Keep 30 days of media backups

# Production backup settings (when DATABASE_URL is set)
if os.getenv('DATABASE_URL'):
    # In production, also backup to cloud storage if configured
    DBBACKUP_CONNECTORS = {
        'default': {
            'ENGINE': 'dbbackup.db.postgresql.PgDumpConnector',
        }
    }
    
# Media backup (if needed)
DBBACKUP_MEDIA_STORAGE = DBBACKUP_STORAGE
DBBACKUP_MEDIA_STORAGE_OPTIONS = DBBACKUP_STORAGE_OPTIONS
